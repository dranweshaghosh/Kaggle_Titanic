{
    "collab_server" : "",
    "contents" : "library(data.table)\nreadData <- function(file.name, column.types, missing.types)\n{\n  read.csv(file.name,\n        colClasses = column.types,\n        na.strings=missing.types,\n        stringsAsFactors = FALSE)\n}\ntrain.data.file <- \"train.csv\"\ntest.data.file <- \"test.csv\"\nmissing.types <- c(\"NA\",\"\")\ntrain.column.types <- c('integer',   # PassengerId\n                        'factor',    # Survived \n                        'factor',    # Pclass\n                        'character', # Name\n                        'factor',    # Sex\n                        'numeric',   # Age\n                        'integer',   # SibSp\n                        'integer',   # Parch\n                        'character', # Ticket\n                        'numeric',   # Fare\n                        'character', # Cabin\n                        'factor'     # Embarked\n                        )\ntest.column.types <- train.column.types[-2]  \n## No Survived Column in test.csv\n\ntrain <- readData(train.data.file, train.column.types, missing.types)\ntest <- readData(test.data.file, test.column.types, missing.types)\n\n\n## Exploring Data\nsummary(train)\n\n## Missing Data\nrequire(Amelia)\nmissmap(train, main = \"Titanic Training Data - Missing Data\", col = c(\"red\",\"black\"))\nmissmap(test, main = \"Titanic Test Data - Missing Data\", col = c(\"red\",\"black\"))\n\n## Data Visualization\nlibrary(ggplot2)\nlibrary(ggthemes)\n\n# PassengerId\npi1 <- ggplot(train, aes(x = PassengerId, y = Survived))\npi1 +geom_point()\n# No obvious relationship found\n\n# Pclass \nmosaicplot(train$Pclass ~ train$Survived, main = \"Passenger Fate by Traveling Class\", shade = FALSE, color = TRUE, xlab = \"Pclass\", ylab = \"Survived\")\n\n# Sex - Yes\nmosaicplot(train$Sex ~ train$Survived, main = \"Passenger Fate by Gender\", shade = FALSE, color = TRUE, xlab = \"Pclass\", ylab = \"Survived\")\n\n# Age - Yes\nboxplot(train$Age ~ train$Survived, main= \"Passenger Fate by Age\", xlab = \"Survived\", ylab = \"Age\")\n\n# SibSp - Number of Siblings/Spouses Aboard - Mixed\nmosaicplot(train$SibSp ~ train$Survived, main = \"Passenger Fate by Siblings\", shade = FALSE, color = TRUE, xlab = \"SibSp\", ylab = \"Survived\")\n\n# Parch - Number of Parents/Children Aboard - Yes for alone vs with parents\nmosaicplot(train$Parch ~ train$Survived, main = \"Passenger Fate by Parents/Children\", shade = FALSE, color = TRUE, xlab = \"Parch\", ylab = \"Survived\")\n\n# Fare - yes\nboxplot(train$Fare ~ train$Survived, main= \"Passenger Fate by Fare\", xlab = \"Survived\", ylab = \"Fare\")\n\n# Are Fare and Pclass related? - Yes, so Passenger Class can be used as substitute for fare\nboxplot(train$Fare ~ train$Pclass, main= \"Fare vs Passenger Class\", xlab = \"Pclass\", ylab = \"Fare\")\n\n# Embarked - Port of Embarkation\nmosaicplot(train$Embarked ~ train$Survived, main = \"Passenger Fate by Port of Embarkation\", shade = FALSE, color = TRUE, xlab = \"Embarked\", ylab = \"Survived\")\nbarplot(table(train$Embarked), names.arg = c(\"Cherbourg\", \"Queenstown\", \"Southampton\"), main = \"Embarked (Port of Emparkation)\")\n\n# Correlogram\nrequire(corrgram)\nrequire(plyr)\ncorrgram.data <- train\n## change features of factor type to numeric type for inclusion on correlogram\ncorrgram.data$Survived <- as.numeric(corrgram.data$Survived)\ncorrgram.data$Pclass <- as.numeric(corrgram.data$Pclass)\ncorrgram.data$Embarked <- revalue(corrgram.data$Embarked, \n                                  c(\"C\" = 1, \"Q\" = 2, \"S\" = 3))\n## generate correlogram\ncorrgram.vars <- c(\"Survived\", \"Pclass\", \"Sex\", \"Age\", \n                   \"SibSp\", \"Parch\", \"Fare\", \"Embarked\")\ncorrgram(corrgram.data[0:891,corrgram.vars], order=FALSE, \n         lower.panel=panel.ellipse, upper.panel=panel.pie, \n         text.panel=panel.txt, main=\"Titanic Training Data\")\n\n## Replacing Fate ILO Survived and revaluing Fate factor\ntrain$Fate <- train$Survived\ntrain$Fate <- revalue(train$Fate, c(\"1\" = \"Survived\", \"0\" = \"Perished\"))\n\n\n\n# Individual's Name\n## Obtaining titles\ntrain$Title <- gsub('(.*, )|(\\\\..*)', '',train$Name)\ntable(train$Sex, train$Title)\ntest$Title <- gsub('(.*, )|(\\\\..*)', '',test$Name)\ntable(test$Sex, test$Title)\n## Combine all rare titles\nrare_title <- c('Capt', 'Col','Don','Dona','Dr','Jonkheer', 'Lady', 'Major','Rev', 'Sir','the Countess')\n## Reassignment of Mlle, Ms and Mme\ntrain$Title[train$Title == 'Mlle'] <- 'Miss'\ntrain$Title[train$Title == 'Ms'] <- 'Miss'\ntrain$Title[train$Title == 'Mme'] <- 'Mrs'\ntrain$Title[train$Title %in% rare_title] <- 'Rare'\ntest$Title[test$Title == 'Mlle'] <- 'Miss'\ntest$Title[test$Title == 'Ms'] <- 'Miss'\ntest$Title[test$Title == 'Mme'] <- 'Mrs'\ntest$Title[test$Title %in% rare_title] <- 'Rare'\ntable(train$Sex, train$Title )\ntable(test$Sex, test$Title )\n## Obtaining Surnames\ntrain$Surname <- sapply(train$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])\ntest$Surname <- sapply(test$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])\n\n# Survival dependence on Family\ntrain$Fsize = train$SibSp + train$Parch + 1\ntest$Fsize = test$SibSp + test$Parch + 1\ntrain$Family <- paste(train$Surname, train$Fsize, sep='_')\ntest$Family <- paste(test$Surname, test$Fsize, sep='_')\nggplot(train, aes(x = Fsize, fill = factor(Survived))) +\n  geom_bar(stat='count', position='dodge') +\n  scale_x_continuous(breaks=c(1:11)) +\n  labs(x = 'Family Size') +\n  theme_few()\n# Discretize family size\ntrain$FsizeD[train$Fsize == 1] <- 'singleton'\ntrain$FsizeD[train$Fsize < 5 & train$Fsize > 1] <- 'small'\ntrain$FsizeD[train$Fsize > 4] <- 'large'\ntest$FsizeD[test$Fsize == 1] <- 'singleton'\ntest$FsizeD[test$Fsize < 5 & test$Fsize > 1] <- 'small'\ntest$FsizeD[test$Fsize > 4] <- 'large'\n# Show family size by survival using a mosaic plot\nmosaicplot(table(train$FsizeD, train$Survived), main='Family Size by Survival', shade=TRUE)\n\n# Survival dependence on Age: Discretized\n## Predictive Imputation of Age using MICE (Multiple Imputation Using Chained Equations)\nsum(is.na(train$Age))\n## Making variables factors\nfactor_vars <- c('PassengerId','Pclass','Sex','Embarked',\n                 'Title','Surname','Family','FsizeD')\ntrain[factor_vars] <- lapply(train[factor_vars], function(x) as.factor(x))\ntest[factor_vars] <- lapply(test[factor_vars], function(x) as.factor(x))\n## Setting a random seed\nset.seed(129)\n## Performing MICE imputation, excluding certain less than useful variables\nlibrary(mice)\nmice_mod <- mice(train[, !names(train) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived', 'Embarked')], method='rf')\nmice_output <- complete(mice_mod)\n## Plotting age distributions\npar(mfrow=c(1,2))\nhist(train$Age, freq=F, main='Age: Original Data', \n     col='darkgreen', ylim=c(0,0.04))\nhist(mice_output$Age, freq=F, main='Age: MICE Output', \n     col='lightgreen', ylim=c(0,0.04))\n## Replacing Age variable with MICE model\ntrain$Age <- mice_output$Age\nsum(is.na(train$Age))\n### Doing the same to test\nmice_mod2 <- mice(test[, !names(test) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived', 'Embarked')], method='rf')\nmice_output2 <- complete(mice_mod2)\n## Plotting age distributions\npar(mfrow=c(1,2))\nhist(test$Age, freq=F, main='Age: Original Data', \n     col='darkgreen', ylim=c(0,0.04))\nhist(mice_output2$Age, freq=F, main='Age: MICE Output', \n     col='lightgreen', ylim=c(0,0.04))\n## Replacing Age variable with MICE model\ntest$Age <- mice_output2$Age\nsum(is.na(test$Age))\n\n## Relationship with Age\nplot(train$Age, train$Survived, xlab = \"Age\", ylab = \"Survived\")\nsurvivers <- data.frame(train$Age[train$Survived == 1])\nnonsurvivers <- data.frame(train$Age[train$Survived == 0])\nsurvivers$title <- 'Survivers'\nnonsurvivers$title <- 'Non-Survivers'\ncolnames(survivers)[1] <- \"Age\"\ncolnames(nonsurvivers)[1] <- \"Age\"\nhist(survivers$Age, breaks = 32 ,xlim=c(0,80), ylim=c(0,40), col=\"red\")\nhist(nonsurvivers$Age,breaks = 32,  add=T, col=rgb(0,1,0,0.5))\n\n##Discretize age\ntrain$Agegroup[train$Age<14] <- 'child'\ntrain$Agegroup[train$Age>=14] <- 'adult'\ntest$Agegroup[test$Age<14] <- 'child'\ntest$Agegroup[test$Age>=14] <- 'adult'\ntable(train$Agegroup, train$Survived)\nmosaicplot(table(train$Agegroup, train$Survived), main = \"Age Group by Survival\", shade = TRUE)\n##Slight benefit of being a child\n\n# Combined Effect of Age and Sex\nggplot(train, aes(Age, fill = factor(Survived))) + \n  geom_histogram() + \n  # Including Sex since we know (a priori) it's a significant predictor\n  facet_grid(.~Sex) + \n  theme_few()\n\n#Mothers may have survived: So maternity?\nlibrary(dplyr)\nfull1 <- bind_rows(select(train, Sex, Title, Age), select(test, Sex, Title, Age))\nfemale_age <- full1 %>% filter(Sex == 'female')\nplot(female_age$Title, female_age$Age)\nb <- female_age[female_age$Title == 'Mrs', ]\nmin(b$Age)\n\ntrain$Mother <- 'Not Mother'\ntrain$Mother[train$Sex == 'female' & train$Parch > 0 & train$Age > min(b$Age) & train$Title != 'Miss'] <- 'Mother'\ntest$Mother <- 'Not Mother'\ntest$Mother[test$Sex == 'female' & test$Parch > 0 & test$Age > min(b$Age) & test$Title != 'Miss'] <- 'Mother'\ntable(train$Mother, train$Survived)\n## Factorizing our two new factor variables\ntrain$Agegroup  <- factor(train$Agegroup)\ntrain$Mother <- factor(train$Mother)\ntest$Agegroup  <- factor(test$Agegroup)\ntest$Mother <- factor(test$Mother)\n\n# Embarkment completion\ntable(is.na(train$Embarked))\ntable(is.na(test$Embarked))\n## Can the data be extrapolated from Passenger Class and Fare?\n## Removing the entries without Embarked Info and adding info from test data\nlibrary(dplyr)\nfull <- bind_rows(select(train, Embarked, Pclass, Fare), select(test, Embarked, Pclass, Fare))\nembark_fare <- full %>% filter(Embarked == \"NA\")\nlibrary(scales)\nggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\n  geom_boxplot() +\n  geom_hline(aes(yintercept=80), \n             colour='red', linetype='dashed', lwd=2) +\n  scale_y_continuous(labels=dollar_format()) +\n  theme_few()\n## Median = $80\ntrain[is.na(train$Embarked),]\n## Entries are 62 and 830\ntrain$Embarked[c(62, 830)] <- 'C'\ntable(is.na(train$Embarked))\n\n# Fixing Fare\ntable(is.na(train$Fare))\ntable(is.na(test$Fare))\n## One entry in test does not have fare\ntest[is.na(test$Fare),]\n## It is entry no. 1044/ test no. 153 and his Pclass is 3; Embarked is S\nggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], \n       aes(x = Fare)) +\n  geom_density(fill = '#99d6ff', alpha=0.4) + \n  geom_vline(aes(xintercept=median(Fare, na.rm=T)),\n             colour='red', linetype='dashed', lwd=1) +\n  scale_x_continuous(labels=dollar_format()) +\n  theme_few()\na <- full[full$Pclass == '3' & full$Embarked == 'S', ]\na <- a[is.na(a$Fare)==FALSE,]\nmedian(a$Fare)\n## Median is $8.05\ntest$Fare[153] <- median(a$Fare)\n\n# Building Model\n##set.seed(754)\n##rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data = train)\n## Show model error\n##plot(rf_model, ylim = c(0,0.36))\n##legend('topright', colnames(rf_model$err.rate),col=1:3, fill=1:3)\n\n# Get importance\n##importance    <- importance(rf_model)\n##varImportance <- data.frame(Variables = row.names(importance), \n##                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n\n# Create a rank variable based on importance\n## rankImportance <- varImportance %>%\n## mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n\n# Use ggplot2 to visualize the relative importance of variables\n##ggplot(rankImportance, aes(x = reorder(Variables, Importance), \n##                           y = Importance, fill = Importance)) +\n##  geom_bar(stat='identity') + \n##  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n##            hjust=0, vjust=0.55, size = 4, colour = 'red') +\n##  labs(x = 'Variables') +\n##  coord_flip() + \n##  theme_few()\n# Predict using the test set\n## prediction <- predict(rf_model, test)\n\n# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\n## solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)\n\n# Write the solution to file\n## write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)\n\n# Comparing algorithms\nlibrary(caret)\nlibrary(corrplot)\nlibrary(doParallel)\nlibrary(gbm)\nlibrary(pROC)\nlibrary(xgboost)\n## Testing harness with 10-fold cross validation\n# Run algorithms using 10-fold cross validation\ncontrol <- trainControl(method=\"cv\", number=10)\nmetric <- \"Accuracy\"\n## a) linear algorithms\nset.seed(7)\nfit.lda <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data=train, method=\"lda\", metric=metric, trControl=control)\n## b) nonlinear algorithms\n## CART\nset.seed(7)\nfit.cart <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data=train, method=\"rpart\", metric=metric, trControl=control)\n## kNN\nset.seed(7)\nfit.knn <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data=train, method=\"knn\", metric=metric, trControl=control)\n## c) advanced algorithms\n## SVM\nset.seed(7)\nfit.svm <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data=train, method=\"svmRadial\", metric=metric, trControl=control)\n## Random Forest\nset.seed(7)\nfit.rf <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data=train, method=\"rf\", metric=metric, trControl=control)\n## Generalized Boosted Regression Model (GBM)\n# Setting up training control\nctrl <- trainControl(method = \"repeatedcv\",\n                     number = 5,\n                     summaryFunction = twoClassSummary,\n                     classProbs = TRUE,\n                     allowParallel = TRUE)\ngrid <- expand.grid(interaction.depth = c(1,2),\n                    n.trees = c(10,20),\n                    shrinkage = c(0.01,0.1),\n                    n.minobsinnode= 20)\nset.seed(7)\n# Setting up for parallel processing\nregisterDoParallel(4)\ngetDoParWorkers()\nfit.bgm <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data=train, method=\"gbm\", metric=metric, trControl=control)\n\n## XGBoost \nset.seed(7)\nfit.xgb <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data=train, method=\"xgbTree\", metric=metric, trControl=control)\n\n\n\n## Comparison of algorithms\n# summarize accuracy of models\nresults <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf, gbm = fit.bgm, xgb=fit.xgb))\nsummary(results)\ndotplot(results)\n## XGBoost is best model\nprint(fit.xgb)\n\n# Get importance\nvarImportance <- data.frame(varImp(fit.xgb)$importance)\nvarImportance$Vars <- row.names(varImportance)\nvarImportance[order(-varImportance$Overall),]\n\n# Create a rank variable based on importance\nrankImportance <- varImportance %>%\n  mutate(Rank = paste0('#',dense_rank(desc(varImportance$Overall))))\n\n# Predict using the test set\nprediction <- predict(fit.xgb, test)\n\n# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\nsolution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)\n\n# Write the solution to file\nwrite.csv(solution, file = 'xgb_mod_Solution.csv', row.names = F)\n",
    "created" : 1476814286168.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3911194910",
    "id" : "7A2D1BBB",
    "lastKnownWriteTime" : 1477429293,
    "last_content_update" : 1477429293641,
    "path" : "~/Documents/Kaggle/Titanic/titanic.R",
    "project_path" : "titanic.R",
    "properties" : {
        "notebook_format" : "pdf_document",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}